*** Settings ***
Resource    ../../../Page/WebTrading/Pentest/Change_PIN.robot
Resource    ../../../Utils/API.robot


*** Variables ***
${textbox_new_password_first}           //*[@name="password"]
${textbox_confirm_password_first}       //*[@name='confirmPassword']
${change_pass_button}                   //*[contains(text(), 'change password')]
${popup_Set_Pin}                        //*[@class="pinFormRoot fadeInAnimation qe-firstPinForm"]//span[text()='Set Your PIN']
${popup_Confirm_Pin}                    //*[@class="pinFormRoot fadeInAnimation qe-firstPinForm"]//span[text()='Confirm Your New PIN']
${popup_Enter_Pin}                      //*[@class="pinFormRoot fadeInAnimation qe-firstPinForm"]//span[text()='Enter Your PIN']
${textbox_Pin}                          //*[contains(@class,"symbolPrivatePinCode")]
${textbox_Confirm_Pin}                  (//*[@class="pinFormInput"])[2]//*[contains(@class,"symbolPrivatePinCode")]
${button_Next}                          //*[@id="pinDoneButton"][text()='next']
${button_Done}                          //*[@id="pinDoneButton"][text()='done']
${error_Confirm_PIN}                    (//*[@class='pinFormAlert size--3'])[2]
${error_Enter_PIN}                      //*[@class="pinFormAtten size--3"]//div[contains(@class,'pinFormAlert')]

${popup_Logout}                         //*[@class="popUpLogout myShow popup isPinForm"]
${forgot_Pin}                           //*[@class="forgotPIN"]
${cancel_button}                        //span[text()='cancel']/parent::div[contains(@class, 'btn-dask')]
${ok_button}                            //span[text()='ok']/parent::div
${textbox_Pass_Pin}                     //*[@id="userInputPassword"]
${popup_Reset_Pin}                      //*[@class="rightSettings resetPinRow fadeInAnimation"]//*[text()='Reset Your PIN']
${icon_Max}                             //*[@title="Maximise"]


*** Keywords ***
Input New Password First
    [Arguments]    ${password}
    Input Text    ${textbox_new_Password_first}    ${password}

Input Confirm Password First
    [Arguments]    ${password}
    Input Text    ${textbox_confirm_password_first}    ${password}

Click Change Password Button
    Click To Element    ${change_pass_button}

Open Create PIN Popup
    ${token}=    Get Token Admin Portal
    Create API Session    ${apiUrl}    ${version}
    ${response}    ${new_username}    ${new_password}    ${new_user_id}=    Create User    ${token}
    Login    ${new_username}    ${new_password}
    Set Suite Variable    ${new_username}
    Set Suite Variable    ${new_user_id}
    Verify element display    //*[contains(text(), 'Choose a Password')]
    Input New Password First    Cgsi#12345
    Input Confirm Password First    Cgsi#12345
    Set Suite Variable    ${new_password}    Cgsi#12345
    Click Change Password Button

Verify popup Set PIN display
    Verify element display    ${popup_Set_Pin}

Verify popup Reset PIN display
    Verify element display    ${popup_Reset_Pin}

Verify popup Confirm PIN display
    Verify element display    ${popup_Confirm_Pin}

Verify popup Enter PIN display
    Verify element display    ${popup_Enter_Pin}

Input PIN
    [Arguments]    ${pin}
    Wait Until Element Is Visible    ${textbox_Pin}    ${time}
    Clear PIN Field
    Press Keys    ${None}    ${pin}

Input Confirm PIN
    [Arguments]    ${pin}
    Wait Until Element Is Visible    ${textbox_Confirm_Pin}    ${time}
    Clear PIN Field
    Press Keys    ${None}    ${pin}

Verify textbox Enter PIN receive
    [Documentation]    Verify PIN input boxes state
    ...    number_text_receive_expected: number of expected filled PIN boxes (0-6)
    [Arguments]    ${number_text_receive_expected}

    # Validate input range
    Should Be True    0 <= ${number_text_receive_expected} <= 6
    ...    msg=Expected filled PIN boxes must be between 0 and 6

    # Check all 6 PIN boxes
    FOR    ${index}    IN RANGE    0    6
        ${expected_class}=    Set Variable If
        ...    ${index} < ${number_text_receive_expected}    symbolPrivatePinCode filled
        ...    ${True}    symbolPrivatePinCode

        ${actual_class}=    SeleniumLibrary.Get Element Attribute    (${textbox_Pin})[${index + 1}]    class
        ${actual_class}=    Strip String    ${actual_class}

        Should Be Equal    ${actual_class}    ${expected_class}
        ...    msg=PIN box ${index + 1} has incorrect state
    END

Verify button [Next] disable
    Verify button disable    ${button_Next}

Verify button [Next] enable
    Verify button enable    ${button_Next}

Verify button [Back] enable
    Verify button disable/enable by JS    ${button_Back}    pointer

Click button [Back]
    Click To Element    ${button_Back}

Click button [Next]
    Click To Element    ${button_Next}

Click button [Done]
    Click To Element    ${button_Done}

Verify message error Confirm PIN
    [Arguments]    ${text_Expected}
    Verify message    ${error_Confirm_PIN}    ${text_Expected}

Verify enter PIN success
    Wait Until Element Is Not Visible    ${popup_Enter_Pin}    ${time}
    Element Should Not Be Visible    ${popup_Enter_Pin}

Verify message error Enter PIN
    [Arguments]    ${text_Expected}
    Verify message    ${error_Enter_PIN}    ${text_Expected}

Verify popup Logout display
    Verify element display    ${popup_Logout}

Click Forgot PIN
    Click To Element    ${forgot_Pin}

Verify button Cancel enable
    Verify button disable/enable by JS    ${cancel_button}    pointer

Click Cancel Button
    Click To Element    ${cancel_button}

Verify button OK enable
    Verify button disable/enable by JS    ${ok_button}    pointer

Verify button OK disable
    Verify button disable    ${ok_button}

Verify textbox Password blank
    Wait Until Element Is Visible    ${textbox_Pass_Pin}
    ${text}=    SeleniumLibrary.Get Element Attribute    ${textbox_Pass_Pin}    value
    Should Be Equal    ${text}    ${EMPTY}

Input textbox Password to confirm
    [Arguments]    ${password}
    Clear And Input Text To Element    ${textbox_Pass_Pin}    ${password}

Create New User For Testing
    Open Create PIN Popup
    Verify popup Set PIN display
    Input PIN    ${pin}
    Verify popup Confirm PIN display
    Input Confirm PIN    ${pin}
    Wait Until Element Is Not Visible    ${popup_Confirm_PIN}    ${time}
    Wait Until Element Is Visible    ${btnOk}    ${time}
    Click To Element    ${btnOk}
    Close Browser
